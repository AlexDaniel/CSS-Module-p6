#!/usr/bin/env perl6

# quick script to translate w3c property definitions to draft
# Perl 6 grammars and actions.
#
# it was used to generate the initial grammar and actions for
# CSS::Language:CSS1 and CSS::Language:CSS21 and many of the extension modules.
#
# Example: perl6 etc/gen-properties.pl grammar etc/css21-properties.txt
#

use CSS::Language::Specification;
use CSS::Language::Specification::Actions;

# actions to generate actions stub. You'll need to pipe stdout somewhere

#= generate parsing grammar
multi MAIN($properties-spec, :$grammar) {

    my $actions = CSS::Language::Specification::Actions.new;
    my %props = load-props($properties-spec, $actions);

    say "use v6;";
    say "# generated by: gen-properties.pl {@*ARGS}";

    say "grammar {$grammar} \{";

    generate-perl6-rules(%props);

    say '}';
}

#= generate actions class
multi MAIN($properties-spec, :$class) {

    my $actions = CSS::Language::Specification::Actions.new;
    my %props = load-props($properties-spec, $actions);

    say "use v6;";
    say "# generated by gen-properties.pl {@*ARGS}";

    say "grammar {$class} \{";

    generate-perl6-actions(%props);

    say '}';
}

#- generate interface roles. unresolved terms only.
multi MAIN($properties-spec, :$role) {

    my $actions = CSS::Language::Specification::Actions.new;
    my %props = load-props($properties-spec, $actions);

    say "use v6;";
    say "# generated by gen-properties.pl {@*ARGS}";

    say "role {$role} \{";

    my %prop-refs = $actions.prop-refs;

    generate-perl6-interface(%props, %prop-refs);

    say '}';
}

sub load-props ($properties-spec, $actions?) {
    my $fh = open($properties-spec // "etc/css21-properties.txt");

    my %synopsis-props;

    for $fh.lines {
        # handle full line comments
        next if /^'#'/;
        my @cols = .split(/\t/);
        my $prop-spec = "@cols[0] : @cols[1]";

        my $/ = CSS::Language::Specification.parse($prop-spec, :rule('property-spec'), :actions($actions) );
        die "unable to parse: $prop-spec"
            unless $/.ast;
        my %prop-defn = $/.ast;
        my $synopsis = %prop-defn<synopsis>;

	%synopsis-props{ $synopsis }.push: %prop-defn;
    }

    return %synopsis-props;
}

sub generate-perl6-rules(%synopsis-props) {

    for %synopsis-props.kv -> $synopsis, $defs {

        my @props = (@$defs).map({my %def = %$_; @( %def<props>)});
        my $sym = @props[0];
        my $match = $sym.subst(/\-/, '\-'):g;

        my $def = $defs[0];
        my $terms = $def<terms>;

        say;
        say "    rule $sym \{ <terms(q\{ $synopsis \}, state \$rx)> \}";
        for @props -> $prop {
            say "    rule decl:sym<{$prop}> \{:i (<sym>) ':'  <terms=.$sym> \}";
        }
    }
}

sub generate-perl6-actions(%synopsis-props) {

    for %synopsis-props.kv -> $synopsis, $defs {

        my @props = (@$defs).map({my %def = %$_; @( %def<props>)});
        my $sym = @props[0];
        my $match = $sym.subst(/\-/, '\-'):g;

        say;
        say "    #= {@props.join(', ')}: $synopsis";
        say "    method decl:sym<{$sym}>(\$/) \{";
        say "        make \$._decl(\$0, \$<val>, \&\*ROUTINE.WHY );";
        say "    \}";
        say "    method {$sym}(\$/) \{ make \$.list(\$/) \}";
    }
}


#= generate an interface class for all unresolved terms.
sub generate-perl6-interface(%synopsis-props, %references) {

    my %unresolved = %references;

    for %synopsis-props.kv -> $synopsis, $defs {

        my @props = (@$defs).map({my %def = %$_; @( %def<props>)});

        %unresolved{$_}:delete
            for @props;
    }

    for %unresolved.keys.sort -> $sym {
        say "    method decl:sym<{$sym}>(\$/) \{ ... \}";
    }
}
