use v6;
#  -- DO NOT EDIT --
# generated by: gen-properties.pl --grammar=CSS::Language::CSS1::Spec::Grammar etc/css1-properties.txt
grammar CSS::Language::CSS1::Spec::Grammar {

#= font-family: [[<family-name> | <generic-family>],]* [<family-name> | <generic-family>]
    rule decl:sym<font-family> {:i (font\-family) ':'  [ <expr=.expr-font-family> || <any-args> ] }
    rule expr-font-family {:i [ [ [ <family-name> | <generic-family> ] ] ',' ]* [ [ <family-name> | <generic-family> ] ] }

#= font-style: normal | italic | oblique
    rule decl:sym<font-style> {:i (font\-style) ':'  [ <expr=.expr-font-style> || <any-args> ] }
    rule expr-font-style {:i [ normal | italic | oblique ] & <keyw> }

#= font-variant: normal | small-caps
    rule decl:sym<font-variant> {:i (font\-variant) ':'  [ <expr=.expr-font-variant> || <any-args> ] }
    rule expr-font-variant {:i [ normal | small\-caps ] & <keyw> }

#= font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900
    rule decl:sym<font-weight> {:i (font\-weight) ':'  [ <expr=.expr-font-weight> || <any-args> ] }
    rule expr-font-weight {:i [ [ normal | bold | bolder | lighter ] & <keyw> | [ 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 ] & <number> ] }

#= font-size: <absolute-size> | <relative-size> | <length> | <percentage>
    rule decl:sym<font-size> {:i (font\-size) ':'  [ <expr=.expr-font-size> || <any-args> ] }
    rule expr-font-size {:i [ <absolute-size> | <relative-size> | <length> | <percentage> ] }

#= font: [ 'font-style' || 'font-variant' || 'font-weight' ]? 'font-size' [ / 'line-height' ]? 'font-family'
    rule decl:sym<font> {:i (font) ':'  [ <expr=.expr-font> || <any-args> ] }
    rule expr-font {:i [ [:my @*SEEN; <expr-font-style> <!seen(0)> | <expr-font-variant> <!seen(1)> | <expr-font-weight> <!seen(2)> ]+ ]? <expr-font-size> [ '/' <expr-line-height> ]? <expr-font-family> }

#= color: <color>
    rule decl:sym<color> {:i (color) ':'  [ <expr=.expr-color> || <any-args> ] }
    rule expr-color {:i <color> }

#= background-color: <color> | transparent
    rule decl:sym<background-color> {:i (background\-color) ':'  [ <expr=.expr-background-color> || <any-args> ] }
    rule expr-background-color {:i [ <color> | transparent & <keyw> ] }

#= background-image: <uri> | none
    rule decl:sym<background-image> {:i (background\-image) ':'  [ <expr=.expr-background-image> || <any-args> ] }
    rule expr-background-image {:i [ <uri> | none & <keyw> ] }

#= background-repeat: repeat | repeat-x | repeat-y | no-repeat
    rule decl:sym<background-repeat> {:i (background\-repeat) ':'  [ <expr=.expr-background-repeat> || <any-args> ] }
    rule expr-background-repeat {:i [ repeat | repeat\-x | repeat\-y | no\-repeat ] & <keyw> }

#= background-attachment: scroll | fixed
    rule decl:sym<background-attachment> {:i (background\-attachment) ':'  [ <expr=.expr-background-attachment> || <any-args> ] }
    rule expr-background-attachment {:i [ scroll | fixed ] & <keyw> }

#= background-position: [<percentage> | <length>]{1,2} | [top | center | bottom] || [left | center | right]
    rule decl:sym<background-position> {:i (background\-position) ':'  [ <expr=.expr-background-position> || <any-args> ] }
    rule expr-background-position {:i [ [ [ <percentage> | <length> ] ]**1..2 | [:my @*SEEN; [ [ top | center | bottom ] & <keyw> ] <!seen(0)> | [ [ left | center | right ] & <keyw> ] <!seen(1)> ]+ ] }

#= background: 'background-color' || 'background-image' || 'background-repeat' || 'background-attachment' || 'background-position'
    rule decl:sym<background> {:i (background) ':'  [ <expr=.expr-background> || <any-args> ] }
    rule expr-background {:i [:my @*SEEN; <expr-background-color> <!seen(0)> | <expr-background-image> <!seen(1)> | <expr-background-repeat> <!seen(2)> | <expr-background-attachment> <!seen(3)> | <expr-background-position> <!seen(4)> ]+ }

#= word-spacing: normal | <length>
    rule decl:sym<word-spacing> {:i (word\-spacing) ':'  [ <expr=.expr-word-spacing> || <any-args> ] }
    rule expr-word-spacing {:i [ normal & <keyw> | <length> ] }

#= letter-spacing: normal | <length>
    rule decl:sym<letter-spacing> {:i (letter\-spacing) ':'  [ <expr=.expr-letter-spacing> || <any-args> ] }
    rule expr-letter-spacing {:i [ normal & <keyw> | <length> ] }

#= text-decoration: none | [ underline || overline || line-through || blink ]
    rule decl:sym<text-decoration> {:i (text\-decoration) ':'  [ <expr=.expr-text-decoration> || <any-args> ] }
    rule expr-text-decoration {:i [ none & <keyw> | [ [:my @*SEEN; underline & <keyw> <!seen(0)> | overline & <keyw> <!seen(1)> | line\-through & <keyw> <!seen(2)> | blink & <keyw> <!seen(3)> ]+ ] ] }

#= vertical-align: baseline | sub | super | top | text-top | middle | bottom | text-bottom | <percentage>
    rule decl:sym<vertical-align> {:i (vertical\-align) ':'  [ <expr=.expr-vertical-align> || <any-args> ] }
    rule expr-vertical-align {:i [ [ baseline | sub | super | top | text\-top | middle | bottom | text\-bottom ] & <keyw> | <percentage> ] }

#= text-transform: capitalize | uppercase | lowercase | none
    rule decl:sym<text-transform> {:i (text\-transform) ':'  [ <expr=.expr-text-transform> || <any-args> ] }
    rule expr-text-transform {:i [ capitalize | uppercase | lowercase | none ] & <keyw> }

#= text-align: left | right | center | justify
    rule decl:sym<text-align> {:i (text\-align) ':'  [ <expr=.expr-text-align> || <any-args> ] }
    rule expr-text-align {:i [ left | right | center | justify ] & <keyw> }

#= text-indent: <length> | <percentage>
    rule decl:sym<text-indent> {:i (text\-indent) ':'  [ <expr=.expr-text-indent> || <any-args> ] }
    rule expr-text-indent {:i [ <length> | <percentage> ] }

#= line-height: normal | <number> | <length> | <percentage>
    rule decl:sym<line-height> {:i (line\-height) ':'  [ <expr=.expr-line-height> || <any-args> ] }
    rule expr-line-height {:i [ normal & <keyw> | <number> | <length> | <percentage> ] }

#= margin-top: <length> | <percentage> | auto
    rule decl:sym<margin-top> {:i (margin\-top) ':'  [ <expr=.expr-margin-top> || <any-args> ] }
    rule expr-margin-top {:i [ <length> | <percentage> | auto & <keyw> ] }

#= margin-right: <length> | <percentage> | auto
    rule decl:sym<margin-right> {:i (margin\-right) ':'  [ <expr=.expr-margin-right> || <any-args> ] }
    rule expr-margin-right {:i [ <length> | <percentage> | auto & <keyw> ] }

#= margin-bottom: <length> | <percentage> | auto
    rule decl:sym<margin-bottom> {:i (margin\-bottom) ':'  [ <expr=.expr-margin-bottom> || <any-args> ] }
    rule expr-margin-bottom {:i [ <length> | <percentage> | auto & <keyw> ] }

#= margin-left: <length> | <percentage> | auto
    rule decl:sym<margin-left> {:i (margin\-left) ':'  [ <expr=.expr-margin-left> || <any-args> ] }
    rule expr-margin-left {:i [ <length> | <percentage> | auto & <keyw> ] }

#= margin: [ <length> | <percentage> | auto ]{1,4}
    rule decl:sym<margin> {:i (margin) ':'  [ <expr=.expr-margin> || <any-args> ] }
    rule expr-margin {:i [ [ <length> | <percentage> | auto & <keyw> ] ]**1..4 }

#= padding-top: <length> | <percentage>
    rule decl:sym<padding-top> {:i (padding\-top) ':'  [ <expr=.expr-padding-top> || <any-args> ] }
    rule expr-padding-top {:i [ <length> | <percentage> ] }

#= padding-right: <length> | <percentage>
    rule decl:sym<padding-right> {:i (padding\-right) ':'  [ <expr=.expr-padding-right> || <any-args> ] }
    rule expr-padding-right {:i [ <length> | <percentage> ] }

#= padding-bottom: <length> | <percentage>
    rule decl:sym<padding-bottom> {:i (padding\-bottom) ':'  [ <expr=.expr-padding-bottom> || <any-args> ] }
    rule expr-padding-bottom {:i [ <length> | <percentage> ] }

#= padding-left: <length> | <percentage>
    rule decl:sym<padding-left> {:i (padding\-left) ':'  [ <expr=.expr-padding-left> || <any-args> ] }
    rule expr-padding-left {:i [ <length> | <percentage> ] }

#= padding: [ <length> | <percentage> ]{1,4}
    rule decl:sym<padding> {:i (padding) ':'  [ <expr=.expr-padding> || <any-args> ] }
    rule expr-padding {:i [ [ <length> | <percentage> ] ]**1..4 }

#= border-top-width: thin | medium | thick | <length>
    rule decl:sym<border-top-width> {:i (border\-top\-width) ':'  [ <expr=.expr-border-top-width> || <any-args> ] }
    rule expr-border-top-width {:i [ [ thin | medium | thick ] & <keyw> | <length> ] }

#= border-right-width: thin | medium | thick | <length>
    rule decl:sym<border-right-width> {:i (border\-right\-width) ':'  [ <expr=.expr-border-right-width> || <any-args> ] }
    rule expr-border-right-width {:i [ [ thin | medium | thick ] & <keyw> | <length> ] }

#= border-bottom-width: thin | medium | thick | <length>
    rule decl:sym<border-bottom-width> {:i (border\-bottom\-width) ':'  [ <expr=.expr-border-bottom-width> || <any-args> ] }
    rule expr-border-bottom-width {:i [ [ thin | medium | thick ] & <keyw> | <length> ] }

#= border-left-width: thin | medium | thick | <length>
    rule decl:sym<border-left-width> {:i (border\-left\-width) ':'  [ <expr=.expr-border-left-width> || <any-args> ] }
    rule expr-border-left-width {:i [ [ thin | medium | thick ] & <keyw> | <length> ] }

#= border-width: [thin | medium | thick | <length>]{1,4}
    rule decl:sym<border-width> {:i (border\-width) ':'  [ <expr=.expr-border-width> || <any-args> ] }
    rule expr-border-width {:i [ [ [ thin | medium | thick ] & <keyw> | <length> ] ]**1..4 }

#= border-color: <color>{1,4}
    rule decl:sym<border-color> {:i (border\-color) ':'  [ <expr=.expr-border-color> || <any-args> ] }
    rule expr-border-color {:i <color>**1..4 }

#= border-style: [ none | dotted | dashed | solid | double | groove | ridge | inset | outset ]{1,4}
    rule decl:sym<border-style> {:i (border\-style) ':'  [ <expr=.expr-border-style> || <any-args> ] }
    rule expr-border-style {:i [ [ none | dotted | dashed | solid | double | groove | ridge | inset | outset ] & <keyw> ]**1..4 }

#= border-top: 'border-top-width' || 'border-style' || <color>
    rule decl:sym<border-top> {:i (border\-top) ':'  [ <expr=.expr-border-top> || <any-args> ] }
    rule expr-border-top {:i [:my @*SEEN; <expr-border-top-width> <!seen(0)> | <expr-border-style> <!seen(1)> | <color> <!seen(2)> ]+ }

#= border-right: 'border-right-width' || 'border-style' || <color>
    rule decl:sym<border-right> {:i (border\-right) ':'  [ <expr=.expr-border-right> || <any-args> ] }
    rule expr-border-right {:i [:my @*SEEN; <expr-border-right-width> <!seen(0)> | <expr-border-style> <!seen(1)> | <color> <!seen(2)> ]+ }

#= border-bottom: 'border-bottom-width' || 'border-style' || <color>
    rule decl:sym<border-bottom> {:i (border\-bottom) ':'  [ <expr=.expr-border-bottom> || <any-args> ] }
    rule expr-border-bottom {:i [:my @*SEEN; <expr-border-bottom-width> <!seen(0)> | <expr-border-style> <!seen(1)> | <color> <!seen(2)> ]+ }

#= border-left: 'border-left-width' || 'border-style' || <color>
    rule decl:sym<border-left> {:i (border\-left) ':'  [ <expr=.expr-border-left> || <any-args> ] }
    rule expr-border-left {:i [:my @*SEEN; <expr-border-left-width> <!seen(0)> | <expr-border-style> <!seen(1)> | <color> <!seen(2)> ]+ }

#= border: 'border-width' || 'border-style' || <color>
    rule decl:sym<border> {:i (border) ':'  [ <expr=.expr-border> || <any-args> ] }
    rule expr-border {:i [:my @*SEEN; <expr-border-width> <!seen(0)> | <expr-border-style> <!seen(1)> | <color> <!seen(2)> ]+ }

#= width: <length> | <percentage> | auto
    rule decl:sym<width> {:i (width) ':'  [ <expr=.expr-width> || <any-args> ] }
    rule expr-width {:i [ <length> | <percentage> | auto & <keyw> ] }

#= height: <length> | auto
    rule decl:sym<height> {:i (height) ':'  [ <expr=.expr-height> || <any-args> ] }
    rule expr-height {:i [ <length> | auto & <keyw> ] }

#= float: left | right | none
    rule decl:sym<float> {:i (float) ':'  [ <expr=.expr-float> || <any-args> ] }
    rule expr-float {:i [ left | right | none ] & <keyw> }

#= clear: none | left | right | both
    rule decl:sym<clear> {:i (clear) ':'  [ <expr=.expr-clear> || <any-args> ] }
    rule expr-clear {:i [ none | left | right | both ] & <keyw> }

#= display: block | inline | list-item | none
    rule decl:sym<display> {:i (display) ':'  [ <expr=.expr-display> || <any-args> ] }
    rule expr-display {:i [ block | inline | list\-item | none ] & <keyw> }

#= white-space: normal | pre | nowrap
    rule decl:sym<white-space> {:i (white\-space) ':'  [ <expr=.expr-white-space> || <any-args> ] }
    rule expr-white-space {:i [ normal | pre | nowrap ] & <keyw> }

#= list-style-type: disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none
    rule decl:sym<list-style-type> {:i (list\-style\-type) ':'  [ <expr=.expr-list-style-type> || <any-args> ] }
    rule expr-list-style-type {:i [ disc | circle | square | decimal | lower\-roman | upper\-roman | lower\-alpha | upper\-alpha | none ] & <keyw> }

#= list-style-image: <uri> | none
    rule decl:sym<list-style-image> {:i (list\-style\-image) ':'  [ <expr=.expr-list-style-image> || <any-args> ] }
    rule expr-list-style-image {:i [ <uri> | none & <keyw> ] }

#= list-style-position: inside | outside
    rule decl:sym<list-style-position> {:i (list\-style\-position) ':'  [ <expr=.expr-list-style-position> || <any-args> ] }
    rule expr-list-style-position {:i [ inside | outside ] & <keyw> }

#= list-style: 'list-style-type' || 'list-style-image' || 'list-style-position'
    rule decl:sym<list-style> {:i (list\-style) ':'  [ <expr=.expr-list-style> || <any-args> ] }
    rule expr-list-style {:i [:my @*SEEN; <expr-list-style-type> <!seen(0)> | <expr-list-style-image> <!seen(1)> | <expr-list-style-position> <!seen(2)> ]+ }

#= position: absolute | relative | static
    rule decl:sym<position> {:i (position) ':'  [ <expr=.expr-position> || <any-args> ] }
    rule expr-position {:i [ absolute | relative | static ] & <keyw> }

#= left: <length> | <percentage> | auto
    rule decl:sym<left> {:i (left) ':'  [ <expr=.expr-left> || <any-args> ] }
    rule expr-left {:i [ <length> | <percentage> | auto & <keyw> ] }

#= top: <length> | <percentage> | auto
    rule decl:sym<top> {:i (top) ':'  [ <expr=.expr-top> || <any-args> ] }
    rule expr-top {:i [ <length> | <percentage> | auto & <keyw> ] }

#= overflow: none | clip | scroll
    rule decl:sym<overflow> {:i (overflow) ':'  [ <expr=.expr-overflow> || <any-args> ] }
    rule expr-overflow {:i [ none | clip | scroll ] & <keyw> }

#= z-index: auto | <integer>
    rule decl:sym<z-index> {:i (z\-index) ':'  [ <expr=.expr-z-index> || <any-args> ] }
    rule expr-z-index {:i [ auto & <keyw> | <integer> ] }

#= visibility: inherit | visible | hidden
    rule decl:sym<visibility> {:i (visibility) ':'  [ <expr=.expr-visibility> || <any-args> ] }
    rule expr-visibility {:i [ inherit | visible | hidden ] & <keyw> }

#= page-break-before: auto | allways | left | right
    rule decl:sym<page-break-before> {:i (page\-break\-before) ':'  [ <expr=.expr-page-break-before> || <any-args> ] }
    rule expr-page-break-before {:i [ auto | allways | left | right ] & <keyw> }

#= page-break-after: auto | allways | left | right
    rule decl:sym<page-break-after> {:i (page\-break\-after) ':'  [ <expr=.expr-page-break-after> || <any-args> ] }
    rule expr-page-break-after {:i [ auto | allways | left | right ] & <keyw> }

#= size: <length>{1,2} | auto | portrait | landscape
    rule decl:sym<size> {:i (size) ':'  [ <expr=.expr-size> || <any-args> ] }
    rule expr-size {:i [ <length>**1..2 | [ auto | portrait | landscape ] & <keyw> ] }

#= marks: crop || cross | none
    rule decl:sym<marks> {:i (marks) ':'  [ <expr=.expr-marks> || <any-args> ] }
    rule expr-marks {:i [:my @*SEEN; crop & <keyw> <!seen(0)> | [ cross | none ] & <keyw> <!seen(1)> ]+ }
}
